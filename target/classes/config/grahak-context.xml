<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jaxws="http://cxf.apache.org/jaxws" 
	xmlns:cxf="http://cxf.apache.org/core"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:clustering="http://cxf.apache.org/clustering"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://cxf.apache.org/jaxws 
	http://cxf.apache.org/schemas/jaxws.xsd
 http://cxf.apache.org/transports/http/configuration
 http://cxf.apache.org/schemas/configuration/http-conf.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context-3.0.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop-2.5.xsd 
 http://www.springframework.org/schema/task
 http://www.springframework.org/schema/task/spring-task-3.0.xsd
 http://cxf.apache.org/transports/http/configuration
 http://cxf.apache.org/schemas/configuration/http-conf.xsd
 http://cxf.apache.org/core 
 http://cxf.apache.org/schemas/core.xsd">

<!-- TODO: this requires for @Async but give troubles like iTrack:NEO-106
getting exception org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: 
Only one AsyncAnnotationBeanPostProcessor may exist within the context. 
 -->
 	<!-- TODO: Rahul test if above error is still there also test with AOP  -->
 
<!-- 	<task:annotation-driven/>  -->
	<!-- if annotation gives error as above then use this and remove annotation in code -->
	<!-- fixed delay 5 minues = "300000" -->
	<!-- TODO: Rahul read from some property so that user of the framework can modify -->
	<task:scheduled-tasks>
	    <task:scheduled ref="scheduledProcessor" method="configUpdateWatcher" fixed-delay="60000"/>
	</task:scheduled-tasks>
	
	<bean id="scheduledProcessor" class="org.community.configloader.spring.ScheduledProcessor">
		<property name="configUpdateWatcher" ref="configUpdateWatcher"></property>
	</bean>
	
	<bean id="configUpdateWatcher" class="org.community.configloader.spring.ConfigUpdateWatcher">
	</bean>

	<context:annotation-config/>
	
	
	<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="thread">
                    <bean class="org.springframework.context.support.SimpleThreadScope"/>
                </entry>
            </map>
        </property>
    </bean>
	
	<bean id="serviceRequestContext" class="org.community.grahak.context.ServiceRequestContext" scope="thread">
		<aop:scoped-proxy/>
	</bean>
	
	<bean
		class="org.community.grahak.spring.bean.factory.annotation.GrahakAnnotationBeanPostProcessor">
		<property name="proxyFactory" ref="proxyFactory"></property>
	</bean>
	 
	<bean id="etJaxWsProxyFactory" class="org.community.grahak.cxf.jaxws.GrahakJaxWsProxyFactoryBean" scope="prototype">
		<property name="serviceProxyFactory" ref="serviceProxyFactory"></property>
	</bean>

	
	<bean id="proxyFactory" class="org.community.grahak.cxf.ClientProxyFactoryBeanFactory" init-method="init">
		<property name="serviceCallHandler" ref="serviceCallHandler"></property>
		<property name="channelRegistry" ref="channelRegistry"></property>
	</bean>
	
<!-- 	<bean class="org.community.grahak.util.EtThreadPoolTaskExecutor" id="executor"/> -->

	<!-- interceptors -->
	<bean id="logInbound" class="org.apache.cxf.interceptor.LoggingInInterceptor"/>
    <bean id="logOutbound" class="org.apache.cxf.interceptor.LoggingOutInterceptor"/>
<!--     <bean id="nameSpaceInInterceptor" class="org.community.grahak.interceptors.XMLMessageInNSInterceptor"/> -->
<!--     <bean id="wrapStreamInterceptor" class="org.community.grahak.interceptors.WrappedOutputStreamInterceptor"/> -->
<!--     <bean id="nameSpaceOutInterceptor" class="org.community.grahak.interceptors.XMLMessageOutNSInterceptor"/> -->
    <bean id="throttleServiceCalls" class="org.community.grahak.interceptors.ThrottleServiceCallsInterceptor">
    	<property name="serviceCallHandler" ref="serviceCallHandler"></property>
    </bean>
	<bean id="endPointResolver" class="org.community.grahak.interceptors.ResloveServiceEndpointInterceptor"></bean>
    <bean id="httpClientPolicyEnforcer"  class="org.community.grahak.interceptors.ApplyHttpClientPolicyInterceptor">
    	<property name="retryStrategyFeature" ref="retryStrategy"></property>
    </bean>
    <bean id="outAuditor" class="org.community.grahak.interceptors.AuditOutInterceptor"></bean>
    <bean id="inAuditor" class="org.community.grahak.interceptors.AuditInInterceptor"></bean>
    <bean id="failoverStrategy" class="org.community.grahak.features.ChannelConfigStrategy"/>
    <bean id="retryStrategy" class="org.apache.cxf.clustering.RetryStrategy"></bean>
    <bean id="cluster" class="org.apache.cxf.clustering.FailoverFeature">
		<property name="strategy" ref="failoverStrategy" />
	</bean> 
	<!--bean id="jaxrsCluster" class="org.community.grahak.features.JAXRSFailoverFeature">
		<property name="strategy" ref="failoverStrategy" />
	</bean--> 
<!-- 	<bean id="etXMLFault" class="org.community.grahak.interceptors.ETXMLFaultInterceptor"></bean> -->
<!-- 	<bean id="checkXMLFault" class="org.community.grahak.interceptors.CheckETXMLFaultInterceptor"></bean> -->
	<bean id="gZipper" class="org.apache.cxf.transport.common.gzip.GZIPInInterceptor"></bean>
<!-- 	<bean id="jmsFeature" class="org.apache.cxf.transport.jms.JMSConfigFeature"> -->
<!-- 		<property name="jmsConfig" ref="jmsConfig"></property> -->
<!-- 	</bean> -->
    
	<!-- channel config -->
	<bean class="org.community.grahak.channel.ChannelConfig" id="channelConfig"></bean>
	<bean class="org.community.grahak.channel.ChannelConfigReader" id="channelConfigReaderId">
		<property name="channelRegistry" ref="channelRegistry"></property>
	</bean>
	<bean id="configObserver" class="org.community.grahak.channel.ConfigChangeObserver">
    	<property name="channelConfigReader" ref="channelConfigReaderId"></property>
    	<property name="serviceCallHandler" ref="serviceCallHandler"></property>
    </bean>
    
	<!-- Misc. Beans -->
	<bean id="serviceCallHandler" class="org.community.grahak.util.ServiceCallHandler" init-method="init">
			<property name="channelRegistry" ref="channelRegistry"></property>
	</bean>
<!-- 	<bean id="cacheManager" class="org.community.cache.ehcache.EhCacheCacheManager"/> -->
	<bean id="serviceAccessCache" class="org.community.grahak.util.GrahakCache" init-method="init">
<!-- 			<property name="cacheManager"  ref="cacheManager"></property> -->
	</bean>

	<bean id="channelRegistry" class="org.community.grahak.channel.ChannelRegistry"/>

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<bean class="org.apache.cxf.transport.http.HTTPTransportFactory" lazy-init="true">
		<property name="transportIds">
			<list>
                <value>http://cxf.apache.org/transports/http</value>
                <value>http://cxf.apache.org/transports/http/configuration</value>
                <value>http://schemas.xmlsoap.org/wsdl/http/</value> 
                 <value>http://schemas.xmlsoap.org/wsdl/soap/http</value> 
				<value>http://cxf.apache.org/bindings/xformat</value>
			</list>
		</property>
	</bean>

	<bean class="org.apache.cxf.transport.local.LocalTransportFactory" lazy-init="true">
		<property name="transportIds">
			<list>
				<value>http://cxf.apache.org/transports/local</value>
			</list>
		</property>
	</bean>

	<bean id="slf"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass">
			<value>java.lang.System</value>
		</property>

		<property name="targetMethod">
			<value>setProperty</value>
		</property>
		<property name="arguments">
			<list>
				<value>org.apache.cxf.io.CachedOutputStream.Threshold</value>
				<value>1048576</value>
			</list>
		</property>
	</bean>
	
	<bean class="org.community.grahak.cxf.ServiceProxyFactory" id="serviceProxyFactory" init-method="init">
	        <property name="LOCAL">
	            <map>
	                <entry key="features">
	                    <list>
	                        <ref bean="cluster"/>
	                    </list>
	                </entry>
	            </map>
	        </property>
	        <property name="SOAP">
	            <map>
	                
	                <entry key="features">
	                    <list>
	                        <ref bean="cluster"/>
	                        <ref bean="retryStrategy"/>
	                        
	                    </list>
	                </entry>
	                <entry key="inInterceptors">
	                    <list>
	                        <ref bean="inAuditor"/>
	                    </list>
	                </entry>
	                <entry key="outInterceptors">
	                    <list>
	                        <ref bean="outAuditor"/>
	                        
	                    </list>
	                </entry>
	                <!--
	                <entry key="bindings">
	                    <list>
	                        <value>org.apache.cxf.common.WSDLConstants.NS_BINDING_XML</value>
	                    </list>
	                </entry>
	                -->
	            </map>
	        </property>
	        <property name="REST">
	            <map>
	                <entry key="features">
	                	<list>
	                		<ref bean="retryStrategy"/>
	                	</list>
	                </entry>
	                <entry key="inInterceptors">
	                    <list>
	                        <!-- Auditor Interceptors -->
	                        <ref bean="inAuditor"/>
	                    </list>
	                </entry>
	                <entry key="outInterceptors">
	                    <list>
	                        <!-- Auditor Interceptors -->
	                        <ref bean="outAuditor"/>
	                        <!-- httpInterceptors -->
	                        <ref bean="throttleServiceCalls"/>
	                        <ref bean="httpClientPolicyEnforcer"/>
	                        <ref bean="endPointResolver"/>
	                    </list>
	                </entry>
	            </map>
	        </property>
	        <property name="XML">
	            <map>
	                
	                <entry key="features">
	                    <list>
	                        <ref bean="cluster"/>
	                      	<ref bean="retryStrategy"/>
	                        
	                    </list>
	                </entry>
	                <entry key="inInterceptors">
	                    <list>
	                        <!-- Auditor Interceptors -->
	                        <ref bean="inAuditor"/>
	                    </list>
	                </entry>
	                <entry key="outInterceptors">
	                    <list>
	                        <!-- Auditor Interceptors -->
	                        <ref bean="outAuditor"/>
	                        <!-- httpInterceptors -->
	                        <ref bean="throttleServiceCalls"/>
	                        <ref bean="httpClientPolicyEnforcer"/>
	                        <ref bean="endPointResolver"/>
	                    </list>
	                </entry>
	                <!--
	                <entry key="bindings">
	                    <list>
	                        <value>org.apache.cxf.common.WSDLConstants.NS_BINDING_XML</value>
	                    </list>
	                </entry>
	                -->
	            </map>
	        </property>
	</bean>
	
	<!-- TODO : is spring's SingleConnectionFactory best one? -->
	<bean id="jmsConnectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<property name="targetConnectionFactory" ref="mqConnecttionFactory"/>
	</bean>
	
	<bean id="mqConnecttionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
<!-- 				<property name="brokerURL" value="tcp://localhost:61616" /> -->
	</bean>

</beans>
